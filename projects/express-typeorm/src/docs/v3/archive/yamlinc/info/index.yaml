version: 1.0.0
title: Serendipity CRM REST API
license:
  name: 'The MIT License'
  url: 'https://opensource.org/licenses/MIT'
termsOfService: 'https://serendipity.org.au/terms-of-service/'
x-logo:
  url: 'http://localhost:3001/public/images/icons/serendipity-logo.svg'
description: |
  # Introduction
  Serendipity's REST API is built on HTTP. The API is RESTful. It has predictable resource URIs.

    The API is documented in <a target="_blank" href="https://github.com/OAI/OpenAPI-Specification">OpenAPI</a> format.

  # Overview
  The following sections describe the resources that comprise Serendipity's REST API.

  ## Current Version
  By default, all requests to https://localhost:3001/api receive the `v1` version of the REST API.
  We encourage you to explicitly request this version via the `Accept` header.

  ## Schema
  All API access is over HTTPS and accessed from https://localhost:3001/api.
  All data is sent and received as JSON. Blank fields are included.

    All dates use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:

      YYYY-MM-DD

    For example: `2017-07-01` (the 1st of July 2017)

    All timestamps use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:

      YYYY-MM-DDTHH:MM:SSZ

    For example: `2017-07-01T11:05:06+10:00`

  ## Timezones
  Some requests allow for specifying timestamps or generate timestamps with time zone information.
  We apply the following rules, in order of priority, to determine timezone information for API calls.

  ### Explicitly provide an ISO 8601 timestamp with timezone information
  For API calls that allow for a timestamp to be specified, we use that exact timestamp.

    For example: `2017-07-01T11:05:06+10:00`

  ## Pagination
  Information about pagination is provided in the [Link](https://tools.ietf.org/html/rfc5988#page-6) header.

    For example:

      Link: <https://localhost:3001/api/individuals?page=2>; rel="next",
            <https://localhost:3001/api/individuals?page=34>; rel="last"

  `rel="next"` states that the next page is `page=2`. This makes sense, since by default, all paginated queries start
  at page `1`. `rel="last"` provides some more information, stating that the last page of results is on `page 34`.
  Accordingly, we have 33 more pages of information that we can consume.

  ## Parameters
  Many API methods take optional parameters:

      GET /individuals/1234/addresses/?addressType='Mailing'

  In this example, the '1234' value is provided for the `:partyId` parameter in the path while `:addressType` is passed
  in the query string. For POST, PATCH, PUT, and DELETE requests, parameters not included in the URL should be encoded
  as JSON with a Content-Type of 'application/json'.

  ## Metadata
  The API provides **metadata services** that you can use to discover information about the classifcation schemes and
  values used by the application.

    For example:

      GET /classifications/roles

    Sample response:

      [
        {
          "id": 1,
          "role": "Director",
          "roleDescription": "An individual responsible for managing a ...",
          "relationship": "Directorship",
          "reciprocalRole": "Company",
          "reciprocalRoleDescription": "An incorporated legal entity."
        },
        {
          ...
        }
      ]

  ## Root Endpoint
  You can issue a GET request to the root endpoint (also known as the service root) to get all the endpoint categories that the REST API supports:

      curl https://localhost:3001/api

  You can issue ...

  ## Authentication
  The API ...
