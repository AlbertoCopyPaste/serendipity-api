version: '3.7'

services:

  openldap:
    container_name: openldap
    build:
      context: ./services/openldap
      dockerfile: Dockerfile
    env_file: ./services/openldap/openldap.env
    ports:
      - "389:389"
      - "636:636"

  keycloak:
    container_name: keycloak
    build:
      context: ./services/keycloak
      dockerfile: Dockerfile
    ports:
      - "10001:8080"
      - "10443:8443"
    volumes:
      - .:/export
    env_file: ./services/keycloak/keycloak.env
    depends_on:
      - openldap

  postgres:
    container_name: postgres
    build:
      context: ./services/postgres
      dockerfile: Dockerfile
    ports:
      - "5432:5432"
    volumes:
      - .:/var/lib/postgresql/data
    env_file: ./services/postgres/postgres.env

  pgadmin:
    container_name: pgadmin
    build:
      context: ./services/pgadmin
      dockerfile: Dockerfile
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@serendipity.org.au}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-secret}
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - .:/root/.pgadmin

  serendipity-api:
    container_name: serendipity-api
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI=http://keycloak:8080/auth/realms/development/protocol/openid-connect/certs
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/serendipity
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - keycloak
      - jasperreports-server-cmdline
    command: ["/wait-for-container-to-exit.sh", "jasperreports-server-cmdline", "-t" , "40", "--", "/entrypoint.sh"]

  jasperreports-server:
    container_name: jasperreports-server
    build:
      context: ./services/jasperreports-server
      dockerfile: Dockerfile
    ports:
      - "11001:8080"
      - "11443:8443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./license:/usr/local/share/jasperserver/license
      - ./keystore:/usr/local/share/jasperserver/keystore
    env_file: ./services/jasperreports-server/jasperreports-server.env
    environment:
      - DB_HOST=postgres
    depends_on:
      - jasperreports-server-cmdline
    command: ["/wait-for-container-to-exit.sh", "jasperreports-server-cmdline", "-t" , "30", "--", "/entrypoint-ce.sh", "run"]

  jasperreports-server-cmdline:
    container_name: jasperreports-server-cmdline
    build:
      context: ./services/jasperreports-server
      dockerfile: Dockerfile-cmdline
    volumes:
      - ./license:/usr/local/share/jasperserver/license
      - ./keystore:/usr/local/share/jasperserver/keystore
    env_file: ./services/jasperreports-server/jasperreports-server.env
    environment:
      - DB_HOST=postgres
      - JRS_LOAD_SAMPLES=true
    depends_on:
      - postgres
    command: ["/wait-for-it.sh", "postgres:5432", "-t" , "30", "--", "/entrypoint-cmdline-ce.sh", "init"]

# serendipity-api:
# volumes:
#   - ./h2:/h2
# env_file: ./serendipity-api-test.env
